# This file is automatically @generated by Lapidary and should not be changed by hand.


__all__ = [
    'ApiClient',
]

import typing

from typing_extensions import Self
from typing import Annotated, Union
from lapidary.runtime import *


import airtable.components.schemas.ListRecordsRequest.schema
import airtable.components.schemas.RecordList.schema
import airtable.components.schemas.SortOrder.schema
import airtable.components.schemas.error.schema


class ApiClient(ClientBase):
    def __init__(
        self,
        *,
        base_url: str = 'https://api.airtable.com/v0',
        **kwargs,
    ):
        super().__init__(
            base_url=base_url,
            **kwargs,
        )

    async def __aenter__(self) -> 'ApiClient':
        await super().__aenter__()
        return self

    async def __aexit__(self, __exc_type=None, __exc_value=None, __traceback=None) -> None:
        await super().__aexit__(__exc_type, __exc_value, __traceback)

    @get('/{baseId}/{tableIdOrName}', security=[{'pat': []}, {'oauth': ['data.records:read']}])
    async def list_records(
        self: Self,
        *,
        baseId_p: Annotated[typing.Union[None, str], Path('baseId', )] = None,
        tableIdOrName_p: Annotated[typing.Union[None, str], Path('tableIdOrName', )] = None,
        timeZone_q: Annotated[typing.Union[None, str], Query('timeZone', )] = None,
        userLocale_q: Annotated[typing.Union[None, str], Query('userLocale', )] = None,
        pageSize_q: Annotated[typing.Union[None, int], Query('pageSize', )] = None,
        maxRecords_q: Annotated[typing.Union[None, int], Query('maxRecords', )] = None,
        offset_q: Annotated[typing.Union[None, str], Query('offset', )] = None,
        view_q: Annotated[typing.Union[None, str], Query('view', )] = None,
        sort_q: Annotated[typing.Union[None, list[airtable.components.schemas.SortOrder.schema.SortOrder]], Query('sort', )] = None,
        filterByFormula_q: Annotated[typing.Union[None, str], Query('filterByFormula', )] = None,
        cellFormat_q: Annotated[typing.Union[None, str], Query('cellFormat', )] = None,
        fields_q: Annotated[typing.Union[None, list[str]], Query('fields', )] = None,
        returnFieldsByFieldId_q: Annotated[typing.Union[None, bool], Query('returnFieldsByFieldId', )] = None,
        recordMetadata_q: Annotated[typing.Union[None, bool], Query('recordMetadata', )] = None,
    ) -> Annotated[
        typing.Union[airtable.components.schemas.RecordList.schema.RecordList, airtable.components.schemas.error.schema.error],
        Responses({
            '200': {
                'application/json': airtable.components.schemas.RecordList.schema.RecordList,
            },
            '422': {
                'application/json': airtable.components.schemas.error.schema.error,
            },
        })
    ]:
        pass

    @post('/{baseId}/{tableIdOrName}/listRecords', security=[{'pat': []}, {'oauth': ['data.records:read']}])
    async def list_records2(
        self: Self,
        request_body: Annotated[
            airtable.components.schemas.ListRecordsRequest.schema.ListRecordsRequest,
            RequestBody({
                'application/json': airtable.components.schemas.ListRecordsRequest.schema.ListRecordsRequest,
            }),
        ],
        *,
        baseId_p: Annotated[typing.Union[None, str], Path('baseId', )] = None,
        tableIdOrName_p: Annotated[typing.Union[None, str], Path('tableIdOrName', )] = None,
        timeZone_q: Annotated[typing.Union[None, str], Query('timeZone', )] = None,
        userLocale_q: Annotated[typing.Union[None, str], Query('userLocale', )] = None,
    ) -> Annotated[
        typing.Union[airtable.components.schemas.RecordList.schema.RecordList, airtable.components.schemas.error.schema.error],
        Responses({
            '200': {
                'application/json': airtable.components.schemas.RecordList.schema.RecordList,
            },
            '422': {
                'application/json': airtable.components.schemas.error.schema.error,
            },
        })
    ]:
        pass
